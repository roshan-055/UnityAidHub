// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int       @id @default(autoincrement())
  name      String?
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Post {
  id            Int        @id @default(autoincrement())
  title         String
  description   String
  startDate     DateTime?
  endDate       DateTime?
  goalAmount    Int
  currentAmount Int
  imageUrl      String?
  view          Int?
  status        Status?    @default(NOTVERIFIED)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  donations     Donation[]
  Comment       Comment[]
  Category      Category   @relation(fields: [categoryId], references: [id])
  categoryId    Int
  Fundraiser    Fundraiser @relation(fields: [fundraiserId], references: [id])
  fundraiserId  Int
}

model Fundraiser {
  id                 Int                 @id @default(autoincrement())
  name               String
  phoneNumber        String
  address            String
  email              String
  requiredAmount     Int
  identityDocument   String
  description        String
  supportingDocument String[]
  url                String?
  secretKey          String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  post               Post[]
  withdrawal         WithdrawalForm[]
}

model WithdrawalForm {
  id               Int         @id @default(autoincrement())
  withdrawalAmount Int
  withdrawalType   Payment
  accountNumber    String
  accountName      String
  identityDocument String
  Fundraiser       Fundraiser? @relation(fields: [fundraiserId], references: [id])
  fundraiserId     Int?
}

enum Payment {
  BANK
  ESEWA
  KHALTI
  FONEPAY
  PAYPAL
}

enum Status {
  VERIFIED
  NOTVERIFIED
}

model Donation {
  id           Int      @id @default(autoincrement())
  amount       Float
  remarks      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  fundraiser   Post     @relation(fields: [fundraiserId], references: [id])
  fundraiserId Int
  Donor        Donor?   @relation(fields: [donorId], references: [id])
  donorId      Int?
}

model Donor {
  id          Int        @id @default(autoincrement())
  name        String
  email       String
  phoneNumber String
  address     String
  donation    Donation[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Category {
  id          Int           @id @default(autoincrement())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  SubCategory SubCategory[]
  post        Post[]
}

model SubCategory {
  id         Int       @id @default(autoincrement())
  name       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  categoryId Int?
  Category   Category? @relation(fields: [categoryId], references: [id])
}

//list of subcategory
//Education
//Health
//Shelter
//Food
//Pets and animals
//Events
//Financial
//Disaster
//Environment and Sanitation

model Ads {
  id           Int        @id @default(autoincrement())
  title        String
  description  String?
  imageUrl     String?
  activity     Activity   @default(ACTIVE)
  companyName  String?
  startDate    DateTime?
  endDate      DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  AdCategory   AdCategory @relation(fields: [adCategoryId], references: [id])
  adCategoryId Int
}

enum Activity {
  ACTIVE
  INACTIVE
}

model AdCategory {
  id   Int    @id @default(autoincrement())
  name String
  ads  Ads[]
}

// model Like {
//   id           Int  @id @default(autoincrement())
//   userId       Int
//   user         User @relation(fields: [userId], references: [id])
//   fundraiserNo Int
//   fundraiser   Post @relation(fields: [fundraiserNo], references: [id])
// }

model Comment {
  id        Int      @id @default(autoincrement())
  body      String
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
