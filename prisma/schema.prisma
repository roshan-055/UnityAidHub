generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and UserRole models for role-based authentication
model User {
  id                Int        @id @default(autoincrement())
  name              String
  phoneNumber       String?    @unique
  email             String     @unique
  address           String?
  password          String
  roles             Role       @default(USER)
  activity          Activity   @default(ACTIVE)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  comments          Comment[]
  likes             Like[]
  donations         Donation[]
  post              Post[]
  profilePictureUrl String?
}

enum Role {
  ADMIN
  USER
  FUNDRAISER
  DONOR
}

model Like {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  Comment   Comment @relation(fields: [commentId], references: [id])
  commentId Int
}

// Post model
model Post {
  id            Int        @id @default(autoincrement())
  title         String
  description   String
  startDate     DateTime?
  endDate       DateTime?
  goalAmount    Int
  currentAmount Int?
  image         String[] //image upload return url and send string of url for backend store {}
  view          Int?
  status        Status     @default(NOTVERIFIED)
  postType      Type       @default(BASIC)
  postUpdates   String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  donations     Donation[]
  comments      Comment[]
  category      Category   @relation(fields: [categoryId], references: [id])
  categoryId    Int
  User          User       @relation(fields: [userId], references: [id])
  userId        Int
}

enum Type {
  BASIC
  URGENT
  TAX_BENIFIT
}

model Pages {
  id        Int      @id @default(autoincrement())
  title     String
  slug      String
  imageUrl  String[]
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enums for Payment
enum Payment {
  BANK
  ESEWA
  KHALTI
  FONEPAY
  PAYPAL
}

enum Status {
  VERIFIED
  NOTVERIFIED
}

// Donation model
model Donation {
  id        Int      @id @default(autoincrement())
  amount    Float
  remarks   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  payment   Payment
  User      User     @relation(fields: [userId], references: [id])
  userId    Int
}

// Category model
model Category {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
  blog      Blog[]
}

// Ads model
model Ads {
  id           Int        @id @default(autoincrement())
  title        String
  description  String?
  imageUrl     String?
  activity     Activity   @default(ACTIVE)
  companyName  String?
  startDate    DateTime?
  endDate      DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  adCategory   AdCategory @relation(fields: [adCategoryId], references: [id])
  adCategoryId Int
}

// Enums for Activity
enum Activity {
  ACTIVE
  INACTIVE
}

// AdCategory model
model AdCategory {
  id   Int    @id @default(autoincrement())
  name String
  ads  Ads[]
}

// Comment model
model Comment {
  id        Int      @id @default(autoincrement())
  body      String
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  userId    Int
  Like      Like[]
}

model Blog {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  imageUrl    String[]
  author      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int
}
